ORG 0x2BF

CURRENT_LEN: WORD 0x0
PTR: WORD 0x5FD

START:
	CLA

GET_LEN:
	IN 0x1D
	AND #0x40
	BEQ GET_LEN
	IN 0x1C
	ST 0x5FD
	ST CURRENT_LEN
	CMP (PTR)+
	CLA
	ST (PTR)

CLEAR:
	CLA

ADD_SYMBOL:
	IN 0x1D
	AND #0x40
	BEQ ADD_SYMBOL
	LD (PTR)
	BNE IS_SECOND
	IN 0x1C
	CALL ISO_8859_5
	SWAB
	ST (PTR)
	JUMP NEXT

IS_SECOND:
	IN 0x1C
	CALL ISO_8859_5
	ST (PTR)
	CMP (PTR)+
	CLA
	ST (PTR)

NEXT:
	LOOP CURRENT_LEN
	JUMP CLEAR

PREPARING_FOR_PRINT:
	LD STRING_ADDR
	ST PTR
	LD 0x5FD
	ST CURRENT_LEN
	CLA

PRINT_1ST:
	IN 0xD
	AND #0x40
	BEQ PRINT_1ST
	CMP (PTR)+
	LD (PTR)
	SWAB
	OUT 0xC
	CMP -(CURRENT_LEN)
PRINT_2ND:
	IN 0xD
	AND #0x40
	BEQ PRINT_2ND
	LD (PTR)
	OUT 0xC
	LOOP CURRENT_LEN
	JUMP PRINT_1ST
	HLT

ISO_8859_5:
	PUSH
	AND BYTE_TWO
	CMP #0xA
	BEQ MINUS
	CMP #0xB
	BEQ PLUS
	CMP #0xC
	BEQ DIV_
	CMP #0xD
	BEQ MUL_
	CMP #0xE
	BEQ POINT
	CMP #0xF
	BEQ EQUAL
	ADD #0x30
	JUMP EXIT_
MINUS:
	LD #0x2D
	JUMP EXIT_
PLUS:
	LD #0x2B
	JUMP EXIT_
DIV_:
	LD #0x2F
	JUMP EXIT_
MUL_:
	LD #0x2A
	JUMP EXIT_
POINT:
	LD #0x2E
	JUMP EXIT_
EQUAL:
	LD #0x3D
	JUMP EXIT_
EXIT_:
	ST TEMP
	POP
	AND BYTE_ONE
	ADD TEMP
	RET

BYTE_ONE: WORD 0xFF00
BYTE_TWO: WORD 0x00FF
TEMP: WORD 0x0
STRING_ADDR: WORD 0x5FD
	
ORG 0x5FD
STRING: WORD 0x0